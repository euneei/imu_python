# 12초 데이터가 50hz로 들어옵니다. -> 600개 (12*50)
# 12초 데이터가 time, x,y,z의 형태로 들어온다고 가정
# 1. 6초씩 오버랩 없이 학습합니다.
# 2. 3초씩 오버랩 하여 학습합니다.

import tensorflow as tf
import pandas as pd
import numpy as np

# n*4 파일이 있다고 가정
# 전처리 
class DataProcessor:
    def __init__(self, file_path):
        self.file_path = file_path
      

    def svm_process(self):
        try: 
            df = pd.read_csv(file_path, sep='\t', header=None, names=['n', 'x', 'y', 'z'])
            df['SVMacc'] = (df['x']**2 + df['y']**2 + df['z']**2)**0.5
            df['SVMacc'] = df['SVMacc'].round(6)
            df = df[['SVMacc']]
            df = df.transpose()
            return df
        except Exception as e:
            print(f"Failed to read or process data: {e}")
            return None
        
    def overlap_df(self, data, window_size = 300, step_size=150):
        if data is not None:
            slicing_window = []
            for start in range(0,len(data)-window_size+1, step_size):
                end = start+window_size
                window = data.iloc[start:end].values.flatten()
                slicing_window.append(window)
            
            new_df = pd.DataFrame(slicing_window)
            return new_df
        else:
            print("Data is not available")


file_path = '.../'

processor = DataProcessor(file_path)
processed_data = processor.svm_process()
new_data = processor.overlap_df(processed_data)
new_data = new_data.drop('SVMacc', axis=1)
print(new_data.shape)


new_data = new_data.values
# new_data = new_data.reshape(new_data.shape[0], new_data.shape[1], 1) 
data = new_data.reshape(new_data.shape[0],new_data.shape[1],1)

df1 = new_data[:, :300]
df2 = new_data[:, 300:600]
#----------------------------
# overlap_df step_size=150인 경우
# df3 = new_data[:, 601:]

 # 테스트
model = tf.keras.models.load_model('train_v2.h5')


predictions_df1 = model.predict(df1)
predicted_classes_df1 = np.argmax(predictions_df1, axis=1)
print(predicted_classes_df1)


predictions_df2 = model.predict(df2)
predicted_classes_df2 = np.argmax(predictions_df2, axis=1)
print(predicted_classes_df2)

# # overlap_df step_size=150인 경우
# predictions_df3 = model.predict(df3)
# predicted_classes_df3 = np.argmax(predictions_df3, axis=1)
# print(predicted_classes_df3)
